//
//  CPMJLEncryptionRequest.swift
//
//
//  Created by Evan Anderson on 8/3/23.
//

import MinecraftPackets

extension ClientPacket.Mojang.Java.Login {
    struct EncryptionRequest: ClientPacketMojangJavaLoginProtocol {
        public static let id:ClientPacket.Mojang.Java.Login = ClientPacket.Mojang.Java.Login.encryptionRequest
        
        public static func parse(_ packet: any GeneralPacket) throws -> Self {
            let serverID:String = try packet.readString()
            let publicKeyLength:VariableIntegerJava = try packet.readVarInt()
            let publicKey:[UInt8] = try packet.readByteArray(bytes: publicKeyLength.value_int)
            let verifyTokenLength:VariableIntegerJava = try packet.readVarInt()
            let verifyToken:[UInt8] = try packet.readByteArray(bytes: verifyTokenLength.value_int)
            return Self(serverID: serverID, publicKeyLength: publicKeyLength, publicKey: publicKey, verifyTokenLength: verifyTokenLength, verifyToken: verifyToken)
        }
        
        /// Appears to be empty.
        public let serverID:String
        /// Length of Public Key.
        public let publicKeyLength:VariableIntegerJava
        /// The server's public key, in bytes.
        public let publicKey:[UInt8]
        /// Length of Verify Token. Always 4 for Notchian servers.
        public let verifyTokenLength:VariableIntegerJava
        /// A sequence of random bytes generated by the server.
        public let verifyToken:[UInt8]
        
        init(serverID: String, publicKeyLength: VariableIntegerJava, publicKey: [UInt8], verifyTokenLength: VariableIntegerJava, verifyToken: [UInt8]) {
            self.serverID = serverID
            self.publicKeyLength = publicKeyLength
            self.publicKey = publicKey
            self.verifyTokenLength = verifyTokenLength
            self.verifyToken = verifyToken
        }
        init(serverID: String, publicKey: [UInt8], verifyToken: [UInt8]) {
            self.serverID = serverID
            self.publicKeyLength = VariableIntegerJava(value: Int32(publicKey.count))
            self.publicKey = publicKey
            self.verifyTokenLength = VariableIntegerJava(value: Int32(verifyToken.count))
            self.verifyToken = verifyToken
        }
        
        public func encodedValues() throws -> [(any PacketEncodableMojangJava)?] {
            var array:[(any PacketEncodableMojangJava)?] = [serverID, publicKeyLength]
            array.append(contentsOf: publicKey)
            array.append(verifyTokenLength)
            array.append(contentsOf: verifyToken)
            return array
        }
    }
}
